#!/bin/bash

isHW=false # light controller is HW
isOpen_rs=false # redshit is opened
DEFAULT_B=70 # default brightness
BIG_STEP=10 # distance between percentages high brightness
FINE_STEP=5 # distance between small brightness
MICRO_STEP=2 # distance between smallest brightness
NANO_STEP=1 # distance between smallest brightness

# function to set global variable `isHW` to true if there is an output from `xbacklight`
function isHardware()
  {
    if [[ $(xbacklight) ]]; then 
      isHW=true
    fi
  }


# function to set global variable `isOpen_rs` to true if there is at least 2 same output from `rs` command
# `rs` checks if at least an instance of redlight is opened
function isOpenRS()
  {
    local rs=$(ps -aux | grep -w /usr/bin/redshift | wc -l)

    if [[ $rs -gt 1 ]]; then
      isOpen_rs=true
    fi
  }


# get brightness from file if it exists (otherwise -1) 
function getSW()
  {
    if [[ -f /tmp/light.rs ]]; then
      echo $(cat /tmp/light.rs)
    else
      echo -1
    fi
  }


# get brightness from xbacklight
function getHW()
  {
    local num=$(xbacklight -get)
    echo $num | awk '{print int($1+0.5)}' # nearest round number to num
  }


# function to trigger redshift signal to switch between pause and run (and reverse) status
function toggleRS()
  {
    if [[ isOpen_rs ]]; then 
      pkill -USR1 redshift
    fi
  }


# function to toggle on and off screen hardware screen light
function toggleLT() 
  {
    if [[ $isHW == true ]]; then
      local lt=$(getHW)
      if [[ lt -ne 0 ]]; then
        echo $lt > /tmp/light.rs
        xbacklight -set 0
      elif [[ lt -eq 0 ]]; then
        lt=$(cat /tmp/light.rs)
        xbacklight -set $lt
      fi
    fi
  }


# change brightness using redshift
function changeSW()
  {
    local step=$BIG_STEP
    local b=""
    killall -q redshift > /dev/null

    # read from file, if it doesn't exist set default value
    if [[ -f /tmp/light.rs ]]; then
      b=$(cat /tmp/light.rs)
    else
      b=$DEFAULT_B
    fi

    if [[ $b -le 14 ]]; then
      step=$MICRO_STEP
    elif [[ $b -le 15 ]]; then
      step=$FINE_STEP
    fi

    if [[ $1 == "up" && $b -lt 100 ]]; then
      ((b+=$step))
    elif [[ $1 == "down" && $b -gt 10 ]]; then
      ((b-=$step))
    fi 

    echo $b > /tmp/light.rs

    b=$(awk "BEGIN { print $b/100 }")
    
    pkill -9 redshift > /dev/null
    redshift -P -b $b &
  }


# change brightness using xbacklight
function changeHW()
  {
  	local b=$(getHW)
    local step=$BIG_STEP

	if [[ b -le 5 ]]; then
		step=$NANO_STEP
  	elif [[ b -le 10 ]]; then
  		step=$MICRO_STEP
  	elif [[ b -le 15 ]]; then
      step=$FINE_STEP
    fi

    case $1 in
      "up")    xbacklight + $step ;;
      "down")  xbacklight - $step ;;
    esac
  }


function main()
  {
    local brightness=$DEFAULT_B
    isHardware
    isOpenRS

    if [[ $isHW == true ]]; then
      brightness=$(getHW)
    else
      b=$(getSW)
      if [[ b -ne -1 ]]; then
        brightness=$b
      fi
    fi

    function changeBRIGHTNESS()
      {
        if [[ $isHW == true ]]; then
          changeHW $1
        else
          changeSW $1
        fi
     }
    
    case $BLOCK_BUTTON in
      1) toggleRS ;;
      2) ;;
      3) toggleLT ;;
      4) changeBRIGHTNESS "up" ;;
      5) changeBRIGHTNESS "down" ;;
    esac

    case $1 in
      "up") changeBRIGHTNESS "up" ;;
      "down") changeBRIGHTNESS "down" ;;
    esac

    if [ $brightness -eq 0 ]; then
        echo -e "<span color='#636a83'></span> $brightness"
    else
        echo -e " $brightness"
    fi
  }

## ------------------------------------------------------------------------- ##


main "$@"
